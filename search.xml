<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何优化博客</title>
      <link href="/2024/04/04/%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/04/04/%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="如何优化博客"><a href="#如何优化博客" class="headerlink" title="如何优化博客"></a>如何优化博客</h2><p>请注意、本篇文章介绍的只是如何优化、并不包含其中的原理、并且优化只做参考</p><p>接下来介绍我是通过哪些方面来优化博客。使用 cdn 加速、压缩静态资源、异步加载。</p><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><blockquote><p>CDN（内容发布网络）是一组分布在多个不同地理位置的 Web 服务器，用于更加有效地向用户发布内容。在优化性能时，向特定用户发布内容的服务器的选择基于对网络慕课拥堵的测量。例如，CDN 可能选择网络阶跃数最小的服务器，或者具有最短响应时间的服务器。</p></blockquote><p>以 Hexo 博客 (Butterfly) 为例、通过 <code>hexo s</code> 生成的静态资源会存放在 <code>img、css、js</code> 目录下、托管在网站中直接访问静态资源速度要较慢点、所以我们会采取引入 CDN 来解决。<del>推荐使用 <a href="http://www.jsdelivr.com/">jsdelivr</a></del>、具体如何使用可以通过搜索引擎来解决。</p><p>针对静态资源</p><p>例如配置文件(_config.Butterfly.yml)：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CDN</span></span><br><span class="line"><span class="comment"># Don&#x27;t modify the following settings unless you know how they work</span></span><br><span class="line"><span class="comment"># 非必要請不要修改</span></span><br><span class="line"><span class="attr">CDN:</span></span><br><span class="line">  <span class="comment"># main</span></span><br><span class="line">  <span class="attr">main_css:</span> <span class="string">https://cdn.jsdelivr.net/gh/NebulaCipher/CDN@1.0/css/index.css</span></span><br><span class="line">  <span class="attr">jquery:</span> <span class="string">https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js</span></span><br><span class="line">  <span class="attr">main:</span> <span class="string">https://cdn.jsdelivr.net/gh/NebulaCipher/CDN@1.0/js/main.js</span></span><br><span class="line">  <span class="attr">utils:</span> <span class="string">https://cdn.jsdelivr.net/gh/NebulaCipher/CDN@1.0/js/utils.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># search</span></span><br><span class="line">  <span class="attr">local_search:</span> <span class="string">https://cdn.jsdelivr.net/gh/NebulaCipher/CDN@1.0/js/search/local-search.js</span></span><br><span class="line">  <span class="attr">algolia_js:</span> <span class="string">https://cdn.jsdelivr.net/gh/NebulaCipher/CDN@1.0/js/search/algolia.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Conversion between Traditional and Simplified Chinese</span></span><br><span class="line">  <span class="attr">translate:</span> <span class="string">https://cdn.jsdelivr.net/gh/NebulaCipher/CDN@1.0/js/tw_cn.js</span></span><br></pre></td></tr></table></figure><p>需要静态加速的有：<code>main_css、main、utils、local_search 或者 algolia_js、translate</code>。但是要注意、主题更新时静态资源不可能第一时间更新、如 <code>jsdelivr</code> 上的资源可能会有一天以上的缓存、这时可以<code>强制刷新(purge)</code></p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/NebulaCipher/CDN@1.0/js/main.js</span><br></pre></td></tr></table></figure><p>通过将 <code>gcore</code> 替换成 <code>purge</code>、带 purge 的链接只是用来刷新</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://purge.jsdelivr.net/gh/NebulaCipher/CDN@1.0/js/main.js</span><br></pre></td></tr></table></figure><p>看到返回的 json 数据中显示的状态是 OK、就可以重新访问 <code>https://cdn.jsdelivr.net/gh/NebulaCipher/CDN@1.0/js/main.js</code></p><p><strong>参考文献：</strong></p><p><a href="https://www.bilibili.com/video/BV1rt411a7pf/?spm_id_from=333.788&vd_source=61937d110266d7ea8a386cda96b1efb8">免费cdn：jsDeliver+github使用教程_哔哩哔哩_bilibili</a><br><a href="https://zhuanlan.zhihu.com/p/76951130">免费CDN：jsDelivr+Github 使用方法 - 知乎 (zhihu.com)</a></p><hr><p><strong>针对全站加速</strong></p><p>当然以上操作看起来有些麻烦。如果备案了可以使用<a href="https://www.upyun.com/">又拍云</a>等一系列 CDN 加速服务商、可以对全站进行加速。</p><h3 id="压缩静态资源"><a href="#压缩静态资源" class="headerlink" title="压缩静态资源"></a>压缩静态资源</h3><ul><li><p>压缩 CSS 和 JS 用的是 Gulp</p><p>参考 Butterfly 作者的教程：<a href="https://butterfly.js.org/posts/4073eda/#Gulp%E5%A3%93%E7%B8%AE">https://butterfly.js.org/posts/4073eda/#Gulp%E5%A3%93%E7%B8%AE</a></p><ol><li><p>安装 Gulp</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g gulp-cli </span><br><span class="line">npm install gulp --save-dev</span><br></pre></td></tr></table></figure></li><li><p>安装压缩 HTML、CSS、JS</p><p><code>压缩HTML</code> gulp-html-minifier-terser 可以压缩 HTML 里的 ES6 语法</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install gulp-htmlclean --save-dev</span><br><span class="line">npm install gulp-html-minifier-terser --save-dev</span><br></pre></td></tr></table></figure><p><code>压缩CSS</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install gulp-clean-css --save-dev</span><br></pre></td></tr></table></figure><p><code>压缩JS</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev gulp-uglify</span><br><span class="line">npm install --save-dev gulp-babel @babel/core @babel/preset-env</span><br></pre></td></tr></table></figure></li><li><p>创建 gulpfile 文件</p><p><code>在博客根目录下创建gulpfile.js</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> cleanCSS = <span class="built_in">require</span>(<span class="string">&#x27;gulp-clean-css&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-html-minifier-terser&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlclean&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">&#x27;gulp-babel&#x27;</span>)</span><br><span class="line">      </span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;compress&#x27;</span>, <span class="function">() =&gt;</span></span><br><span class="line">  gulp.<span class="title function_">src</span>([<span class="string">&#x27;./public/**/*.js&#x27;</span>, <span class="string">&#x27;!./public/**/*.min.js&#x27;</span>])</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">babel</span>(&#123;</span><br><span class="line">      <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">uglify</span>().<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-css&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>([<span class="string">&#x27;./public/**/*.css&#x27;</span>])</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">cleanCSS</span>(&#123;</span><br><span class="line">            <span class="attr">compatibility</span>: <span class="string">&#x27;ie11&#x27;</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line">      </span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-html&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.html&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">htmlclean</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">htmlmin</span>(&#123;</span><br><span class="line">            <span class="attr">removeComments</span>: <span class="literal">true</span>, <span class="comment">//清除 HTML 註释</span></span><br><span class="line">            <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>, <span class="comment">//压缩 HTML</span></span><br><span class="line">            <span class="attr">collapseBooleanAttributes</span>: <span class="literal">true</span>, <span class="comment">//省略布尔属性的值 &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">            <span class="attr">removeEmptyAttributes</span>: <span class="literal">true</span>, <span class="comment">//删除所有空格作属性值 &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">            <span class="attr">removeScriptTypeAttributes</span>: <span class="literal">true</span>, <span class="comment">//删除 &lt;script&gt; 的 type=&quot;text/javascript&quot;</span></span><br><span class="line">            <span class="attr">removeStyleLinkTypeAttributes</span>: <span class="literal">true</span>, <span class="comment">//删除 &lt;style&gt; 和 &lt;link&gt; 的 type=&quot;text/css&quot;</span></span><br><span class="line">            <span class="attr">minifyJS</span>: <span class="literal">true</span>, <span class="comment">//压缩页面 JS</span></span><br><span class="line">            <span class="attr">minifyCSS</span>: <span class="literal">true</span>, <span class="comment">//压缩页面 CSS</span></span><br><span class="line">            <span class="attr">minifyURLs</span>: <span class="literal">true</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, gulp.<span class="title function_">parallel</span>(</span><br><span class="line">  <span class="string">&#x27;compress&#x27;</span>, <span class="string">&#x27;minify-css&#x27;</span>, <span class="string">&#x27;minify-html&#x27;</span></span><br><span class="line">))</span><br></pre></td></tr></table></figure></li><li><p>运行</p><p><code>在hexo g之后运行gulp就行</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gulp</span><br></pre></td></tr></table></figure><p>完整命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; gulp</span><br></pre></td></tr></table></figure></li></ol></li><li><p>压缩图片用的是 <a href="https://tinypng.com/">TinyPNG</a> 和<a href="https://zh.recompressor.com/">Recompressor</a> 。前者无损压缩、后者是有损压缩</p></li></ul><h3 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h3><p>在浏览器解析 HTML 的时候，遇到 <code>&lt;link&gt;、&lt;script&gt;</code>，这个过程会阻塞后面内容、这样就会增加加载时间。不建议将 JS 放到 <code>&lt;head&gt;</code> 里。</p><p>此时我们需要使用异步加载的形式缩短页面的加载时间。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">异步加载CSS</span><br></pre></td></tr></table></figure><p>修改 <code>themes\Butterfly\layout\includes\head.pug</code>(部分内容)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ...</span><br><span class="line"></span><br><span class="line">//- main css</span><br><span class="line">link(rel=&#x27;stylesheet&#x27;, href=url_for(theme.gcore.main_css))</span><br><span class="line">link(rel=&#x27;stylesheet&#x27;, href=url_for(theme.gcore.fontawesome), media=&quot;print&quot; onload=&#x27;this.media=&quot;all&quot;,this.onload=null&#x27;)</span><br><span class="line"></span><br><span class="line">if (theme.snackbar &amp;&amp; theme.snackbar.enable)</span><br><span class="line">  link(rel=&#x27;stylesheet&#x27;, href=url_for(theme.gcore.snackbar_css), media=&quot;print&quot; onload=&#x27;this.media=&quot;all&quot;,this.onload=null&#x27;)</span><br><span class="line"></span><br><span class="line">if theme.algolia_search.enable</span><br><span class="line">  link(rel=&#x27;stylesheet&#x27; href=url_for(theme.gcore.algolia_search_css),media=&quot;print&quot; onload=&#x27;this.media=&quot;all&quot;,this.onload=null&#x27;)</span><br><span class="line">  script(src=url_for(theme.gcore.algolia_search) defer)</span><br><span class="line"></span><br><span class="line">// ...</span><br><span class="line">异步加载js</span><br><span class="line">PLAINTEXT</span><br><span class="line">&lt;script defer src=&quot;xxx.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>修改 <code>themes\Butterfly\layout\includes\additional-js.pug</code> (部分内容)</p><p>其实下面内容也修改不大、毕竟不是所有 JS 都能使用异步加载、可能会出现一些问题</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div</span><br><span class="line">  script(src=url_for(theme.gcore.utils))</span><br><span class="line">  script(src=url_for(theme.gcore.main))</span><br><span class="line"></span><br><span class="line">  if theme.translate &amp;&amp; theme.translate.enable</span><br><span class="line">    script(src=url_for(theme.gcore.translate))</span><br><span class="line"></span><br><span class="line">  if theme.medium_zoom</span><br><span class="line">    script(src=url_for(theme.gcore.medium_zoom))</span><br><span class="line"></span><br><span class="line">  if theme.instantpage</span><br><span class="line">    script(src=url_for(theme.gcore.instantpage) type=&quot;module&quot;)</span><br><span class="line"></span><br><span class="line">  if theme.lazyload.enable</span><br><span class="line">    script(src=url_for(theme.gcore.lazyload))</span><br><span class="line"></span><br><span class="line">  if (theme.snackbar &amp;&amp; theme.snackbar.enable)</span><br><span class="line">    script(src=url_for(theme.gcore.snackbar))</span><br><span class="line"></span><br><span class="line">  if theme.pangu &amp;&amp; theme.pangu.enable</span><br><span class="line">    !=partial(&#x27;includes/third-party/pangu.pug&#x27;, &#123;&#125;, &#123;cache:theme.fragment_cache&#125;)</span><br><span class="line"></span><br><span class="line">  //- search</span><br><span class="line">  if theme.algolia_search.enable</span><br><span class="line">    script(src=url_for(theme.gcore.algolia_js) defer)</span><br><span class="line">  else if theme.local_search.enable</span><br><span class="line">    script(src=url_for(theme.gcore.local_search) defer)</span><br><span class="line"></span><br><span class="line">  // ...</span><br></pre></td></tr></table></figure><h3 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h3><blockquote><p>渐进式网络应用程式（英语：Progressive Web Apps，简称：PWA）是一种普通网页或网站架构起来的网络应用程式，但它可以以传统应用程式或原生移动应用程式形式展示给用户。这种应用程式形态视图将目前最为现代化的浏览器提供的功能与行动装置的体验优势相结合。</p></blockquote><p>我会把这个放在优化博客中个人只是喜欢那个更新提示、在我的使用中、PWA 最大的作用是能将需要缓存的内容缓存在浏览器、刷新页面时会直接获取缓存</p><p>PWA 教程： <a href="https://butterfly.js.org/posts/4073eda/#PWA">https://butterfly.js.org/posts/4073eda/#PWA</a></p><h3 id="Pjax"><a href="#Pjax" class="headerlink" title="Pjax"></a>Pjax</h3><blockquote><p>通过 ajax 和 pushState 技术提供了极速的（无刷新 ajax 加载）浏览体验，并且保持了真实的地址、网页标题，浏览器的后退（前进）按钮也可以正常使用</p></blockquote><p>这使得页面切换变得更加迅速、当然还是存在一些 Bug</p><p>开启只需要在 <code>_config.butterfly.yml</code> 中 开启 pjax</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">YML</span><br><span class="line">pjax:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line">    # - xxxx</span><br><span class="line">    # - xxxx</span><br></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="https://butterfly.js.org/posts/4073eda/">Butterfly 安装文档 (六) 进阶教程</a></li></ul><p>更多大佬的教程：</p><ul><li><a href="https://akilar.top/posts/615d5ede/">Hexo 异步加载方案</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原码、反码与补码</title>
      <link href="/2024/04/03/%E5%8E%9F%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E4%B8%8E%E8%A1%A5%E7%A0%81/"/>
      <url>/2024/04/03/%E5%8E%9F%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E4%B8%8E%E8%A1%A5%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h3 id="1-原码"><a href="#1-原码" class="headerlink" title="1.原码"></a>1.原码</h3><p><font color="#ff0000">原码</font>就是符号位加上真值的绝对值，即用第一位表示符号，其余位表示值。比如如果是8位二进制：</p><p>[+1] &#x3D; 0000 0001</p><p>[-1] &#x3D; 1000 0001</p><p><strong>第一位是符号位</strong>，所以8位二进制数的取值范围就是：</p><p>[1111 1111 , 0111 1111]</p><p>即</p><p>[-127 , 127]</p><p>原码是人脑最容易理解和计算的表示方式。</p><h3 id="2-反码"><a href="#2-反码" class="headerlink" title="2.反码"></a>2.反码</h3><p>反码的表示方法是: 正数的反码是其本身，<strong>负数的反码是在其原码的基础上，符号位不变，其余各个位取反</strong>。</p><p>[+1] &#x3D; <code>[00000001]</code>&#x3D; <code>[00000001]</code></p><p>[-1] &#x3D;<code> [10000001]</code>&#x3D; <code>[11111110]</code></p><p>可见如果一个反码表示的是负数，人脑无法直观的看出来它的数值。通常要将其转换成原码再计算。</p><h3 id="3-补码"><a href="#3-补码" class="headerlink" title="3.补码"></a>3.补码</h3><p>补码的表示方法是：正数的补码就是其本身，负数的补码是在其原码的基础上，符号位不变，其余各位取反，最后+1 (即在<strong>反码的基础上+1</strong>)。</p><p>[+1] &#x3D; <code>[00000001]</code> &#x3D; <code>[00000001]</code> &#x3D; <code>[00000001]</code></p><p>[-1] &#x3D; <code>[10000001]</code> &#x3D; <code>[11111110]</code> &#x3D; <code>[11111111]</code></p><p>对于负数，补码表示方式也是人脑无法直观看出其数值的。通常也需要转换成原码在计算其数值。</p><p>补码解决了0的符号以及两个编码的问题，让计算机的减法可以直接转为加法运算(计算机内部都是用<strong>补码</strong>直接运算，只有负数与原码不一致):</p><p>1-1 &#x3D; 1 + (-1) &#x3D; [0000 0001]原 + [1000 0001]原 &#x3D; [0000 0001]补 + [1111 1111]补 &#x3D; [0000 0000]补&#x3D;[0000 0000]原</p><p>这样0用[0000 0000]表示, 而以前出现问题的-0则不存在了.而且可以<strong>用[1000 0000]表示-128</strong>:</p><p>(-1) + (-127) &#x3D; [1000 0001]原 + [1111 1111]原 &#x3D; [1111 1111]补 + [1000 0001]补 &#x3D; [1000 0000]补</p><p>-1-127的结果应该是-128，在用补码运算的结果中，[1000 0000]补就是-128。但是注意因为实际上是使用以前的-0的补码来表示-128，所以-128并没有原码和反码表示 。</p><p>使用补码，不仅仅修复了0的符号以及存在两个编码的问题，而且还能够：多表示一个最低数。这就是为什么8位二进制，使用原码或反码表示的范围为[-127, +127]，而使用补码表示的范围为[-128, 127]。</p><p><strong>计算机利用补码实现两数相减</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 课程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bilibili插入视频试用</title>
      <link href="/2024/04/02/bilibili%E6%8F%92%E5%85%A5%E8%A7%86%E9%A2%91%E8%AF%95%E7%94%A8/"/>
      <url>/2024/04/02/bilibili%E6%8F%92%E5%85%A5%E8%A7%86%E9%A2%91%E8%AF%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="//player.bilibili.com/player.html?aid=449200095&bvid=BV1pj411b7QZ&cid=1285660690&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div> <hr><p>这下听懂了</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="//player.bilibili.com/player.html?aid=532668062&bvid=BV1Lu411E7vH&cid=1244619741&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div>Man, what can I say]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NBA（试用）</title>
      <link href="/2024/04/01/NBA/"/>
      <url>/2024/04/01/NBA/</url>
      
        <content type="html"><![CDATA[<p><strong>You know</strong></p><p><strong>This is why we play</strong></p><p><em><strong>One Mission</strong></em></p><p><img src="/2024/04/01/NBA/Rockets.jpg"></p><p>随便放几张图看看能不能正常显示</p><p><img src="/2024/04/01/NBA/wp8178493.jpg" alt="Houston Rockets Logo"></p>]]></content>
      
      
      
        <tags>
            
            <tag> NBA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码演示</title>
      <link href="/2024/03/31/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%BC%94%E7%A4%BA/%E6%BC%94%E7%A4%BA/"/>
      <url>/2024/03/31/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%BC%94%E7%A4%BA/%E6%BC%94%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span> ()&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Loop iteration:&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&quot;Bob&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>My first blog</title>
      <link href="/2024/03/30/My-first-blog/"/>
      <url>/2024/03/30/My-first-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="Welcome-you-to-my-blog"><a href="#Welcome-you-to-my-blog" class="headerlink" title="Welcome you to my blog"></a>Welcome you to my blog</h1><h3 id="我在尝试搭建自己的博客，这可能需要一点时间来将这个网站完善，但我敢确信这将会是一个优美的网站，因为本人在审美方面有些许强迫症，更多功能敬请期待"><a href="#我在尝试搭建自己的博客，这可能需要一点时间来将这个网站完善，但我敢确信这将会是一个优美的网站，因为本人在审美方面有些许强迫症，更多功能敬请期待" class="headerlink" title="我在尝试搭建自己的博客，这可能需要一点时间来将这个网站完善，但我敢确信这将会是一个优美的网站，因为本人在审美方面有些许强迫症，更多功能敬请期待"></a>我在尝试搭建自己的博客，这可能需要一点时间来将这个网站完善，但我敢确信这将会是一个优美的网站，因为本人在审美方面有些许强迫症，更多功能敬请期待</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/03/30/hello-world/"/>
      <url>/2024/03/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
